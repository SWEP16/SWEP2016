<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvvmDialogs</name>
    </assembly>
    <members>
        <member name="T:MvvmDialogs.DialogTypeLocators.DialogTypeLocatorCache">
            <summary>
            A cache holding the known mappings between view model types and dialog types.
            </summary>
        </member>
        <member name="M:MvvmDialogs.DialogTypeLocators.DialogTypeLocatorCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmDialogs.DialogTypeLocators.DialogTypeLocatorCache"/> class.
            </summary>
        </member>
        <member name="M:MvvmDialogs.DialogTypeLocators.DialogTypeLocatorCache.Add(System.Type,System.Type)">
            <summary>
            Adds the specified view model type with its corresponding dialog type.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="dialogType">Type of the dialog.</param>
        </member>
        <member name="M:MvvmDialogs.DialogTypeLocators.DialogTypeLocatorCache.Get(System.Type)">
            <summary>
            Gets the dialog type for specified view model type.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <returns>The dialog type if found; otherwise null.</returns>
        </member>
        <member name="M:MvvmDialogs.DialogTypeLocators.DialogTypeLocatorCache.Clear">
            <summary>
            Removes all view model types with its corresponding dialog types.
            </summary>
        </member>
        <member name="P:MvvmDialogs.DialogTypeLocators.DialogTypeLocatorCache.Count">
            <summary>
            Gets the number of dialog type/view model type pairs contained in the cache.
            </summary>
        </member>
        <member name="T:MvvmDialogs.DialogTypeLocators.NamingConventionDialogTypeLocator">
            <summary>
            Class responsible for locating dialog types for specified view models based on a naming
            convention used in a multitude of articles and code samples regarding the MVVM pattern.
            
            The convention states that if the name of the view model is
            'MyNamespace.ViewModels.MyDialogViewModel' then the name of the dialog is
            'MyNamespace.Views.MyDialog'.
            </summary>
        </member>
        <member name="M:MvvmDialogs.DialogTypeLocators.NamingConventionDialogTypeLocator.LocateDialogType(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Locates the dialog type representing the specified view model in a user interface.
            </summary>
            <param name="viewModel">The view model to find the dialog type for.</param>
            <returns>
            The dialog type representing the specified view model in a user interface.
            </returns>
        </member>
        <member name="T:MvvmDialogs.Logging.Logger">
            <summary>
            Class responsible for writing log messages.
            </summary>
        </member>
        <member name="P:MvvmDialogs.Logging.Logger.Writer">
            <summary>
            Set this property to expose logs for diagnostics purposes.
            </summary>
            <example>
            This sample shows how messages are logged using <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)"/>.
            <code>
            Logger.Writer = message => Debug.WriteLine(message);
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
        </member>
        <member name="T:MvvmDialogs.DialogService">
            <summary>
            Class abstracting the interaction between view models and views when it comes to
            opening dialogs using the MVVM pattern in UWP applications.
            </summary>
        </member>
        <member name="M:MvvmDialogs.DialogService.#ctor(System.Func{System.Type,Windows.UI.Xaml.Controls.ContentDialog},System.Func{System.ComponentModel.INotifyPropertyChanged,System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmDialogs.DialogService"/> class.
            </summary>
            <param name="contentDialogFactory">
            Function creating a content dialog with a specified type. If no content dialog factory
            is specified <see cref="M:System.Activator.CreateInstance(System.Type)"/> is used to create the content
            dialog.
            </param>
            <param name="contentDialogTypeLocator">
            Function returning the content dialog type based on view model instance. If no content dialog type
            locator is specified a naming convention based approach is used where the content dialog type
            is based on the name of the view model. The convention states that if the name of the
            view model is 'MyNamespace.ViewModels.MyDialogViewModel' then the name of the dialog is
            'MyNamespace.Views.MyDialog'.
            <para/>
            This naming convention is used in a multitude of articles and code samples regarding
            the MVVM pattern and is a good default strategy.
            </param>
        </member>
        <member name="M:MvvmDialogs.DialogService.ShowContentDialogAsync``1(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Begins an asynchronous operation to show the <see cref="T:Windows.UI.Xaml.Controls.ContentDialog" /> of type
            <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of the content dialog to show.</typeparam>
            <param name="viewModel">The view model of the new content dialog.</param>
            <returns>
            An asynchronous operation showing the dialog. When complete, returns a
            <see cref="T:Windows.UI.Xaml.Controls.ContentDialogResult" />.
            </returns>
        </member>
        <member name="M:MvvmDialogs.DialogService.ShowContentDialogAsync(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Begins an asynchronous operation to show the <see cref="T:Windows.UI.Xaml.Controls.ContentDialog" /> of a type that
            is determined by the dialog type locator.
            </summary>
            <param name="viewModel">The view model of the new content dialog.</param>
            <returns>
            An asynchronous operation showing the dialog. When complete, returns a
            <see cref="T:Windows.UI.Xaml.Controls.ContentDialogResult" />.
            </returns>
        </member>
        <member name="M:MvvmDialogs.DialogService.ShowMessageDialogAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Windows.UI.Popups.IUICommand},System.Nullable{System.UInt32},System.Nullable{System.UInt32},Windows.UI.Popups.MessageDialogOptions)">
            <summary>
            Begins an asynchronous operation showing a <see cref="T:Windows.UI.Popups.MessageDialog" />.
            </summary>
            <param name="content">The message displayed to the user.</param>
            <param name="title">The title you want displayed on the dialog.</param>
            <param name="commands">
            The array of commands that appear in the command bar of the message dialog. These
            commands makes the dialog actionable.
            </param>
            <param name="defaultCommandIndex">
            The index of the command you want to use as the default. This is the command that fires
            by default when users press the ENTER key.
            </param>
            <param name="cancelCommandIndex">
            The index of the command you want to use as the cancel command. This is the command
            that fires when users press the ESC key.
            </param>
            <param name="options">The options for the dialog.</param>
            <returns>
            An object that represents the asynchronous operation. For more on the async pattern, see
            <see href="https://msdn.microsoft.com/en-us/windows/uwp/threading-async/asynchronous-programming-universal-windows-platform-apps">Asynchronous programming</see>.
            </returns>
        </member>
        <member name="M:MvvmDialogs.DialogService.PickSingleFileAsync(MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerSettings)">
            <summary>
            Shows the file picker so that the user can pick one file.
            </summary>
            <param name="settings">The settings for the file open picker.</param>
            <returns>
            When the call to this method completes successfully, it returns a
            <see cref="T:Windows.Storage.StorageFile" /> object that represents the file that the user picked.
            </returns>
        </member>
        <member name="M:MvvmDialogs.DialogService.PickMultipleFilesAsync(MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerSettings)">
            <summary>
            Shows the file picker so that the user can pick multiple files.
            </summary>
            <param name="settings">The settings for the file open picker.</param>
            <returns>
            When the call to this method completes successfully, it returns a
            <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> object that contains all the files that were
            picked by the user. Picked files in this array are represented by
            <see cref="T:Windows.Storage.StorageFile" /> objects.
            </returns>
        </member>
        <member name="M:MvvmDialogs.DialogService.PickSaveFileAsync(MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerSettings)">
            <summary>
            Shows the file picker so that the user can save a file and set the file name,
            extension, and location of the file to be saved.
            </summary>
            <param name="settings">The settings for the file save picker.</param>
            <returns>
            When the call to this method completes successfully, it returns a
            <see cref="T:Windows.Storage.StorageFile" /> object that was created to represent the saved file. The file
            name, extension, and location of this <see cref="T:Windows.Storage.StorageFile" /> match those specified
            by the user, but the file has no content.
            </returns>
        </member>
        <member name="M:MvvmDialogs.DialogService.PickSingleFolderAsync(MvvmDialogs.FrameworkPickers.Folder.FolderPickerSettings)">
            <summary>
            Shows the folder picker so that the user can pick a folder.
            </summary>
            <param name="settings">The settings for the folder picker.</param>
            <returns>
            When the call to this method completes successfully, it returns a
            <see cref="T:Windows.Storage.StorageFolder" /> object that represents the folder that the user picked.
            </returns>
        </member>
        <member name="T:MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerSettings">
            <summary>
            Settings for <see cref="T:Windows.Storage.Pickers.FileOpenPicker"/>.
            </summary>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerSettings.CommitButtonText">
            <summary>
            Gets or sets the label text of the file open picker's commit button.
            </summary>
            <remarks>
            By default, the label text of the commit button is <b>Open</b>.
            </remarks>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerSettings.FileTypeFilter">
            <summary>
            Gets or sets the collection of file types that the file open picker displays.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.IList`1"/> object that contains a collection of file types
            (file name extensions) , such as ".doc" and ".png". File name extensions are stored in
            this sequence as string objects.
            </value>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerSettings.SettingsIdentifier">
            <summary>
            Gets or sets the settings identifier associated with the state of the file open picker.
            </summary>
            <remarks>
            If your application uses multiple instances of the file open picker, you can use this
            property to identify the individual instances.
            </remarks>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerSettings.SuggestedStartLocation">
            <summary>
            Gets or sets the initial location where the file open picker looks for files to present
            to the user.
            </summary>
            <remarks>
            The <b>SuggestedStartLocation</b> is not always used as the start location for the
            file picker. To give the user a sense of consistency, the file picker remembers the
            last location that the user navigated to and will generally start at that location.
            </remarks>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerSettings.ViewMode">
            <summary>
            Gets or sets the view mode that the file open picker uses to display items.
            </summary>
        </member>
        <member name="T:MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerWrapper">
            <summary>
            Class wrapping <see cref="T:Windows.Storage.Pickers.FileOpenPicker"/>.
            </summary>
        </member>
        <member name="M:MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerWrapper.#ctor(MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerWrapper"/> class.
            </summary>
            <param name="settings">The settings for the file open picker.</param>
        </member>
        <member name="M:MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerWrapper.PickSingleFileAsync">
            <summary>
            Shows the file picker so that the user can pick one file.
            </summary>
            <returns>
            When the call to this method completes successfully, it returns a
            <see cref="T:Windows.Storage.StorageFile"/> object that represents the file that the user picked.
            </returns>
        </member>
        <member name="M:MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerWrapper.PickMultipleFilesAsync">
            <summary>
            Shows the file picker so that the user can pick multiple files.
            </summary>
            <returns>
            When the call to this method completes successfully, it returns a
            <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> object that contains all the files that were
            picked by the user. Picked files in this array are represented by
            <see cref="T:Windows.Storage.StorageFile"/> objects.
            </returns>
        </member>
        <member name="T:MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerSettings">
            <summary>
            Settings for <see cref="T:Windows.Storage.Pickers.FileSavePicker"/>.
            </summary>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerSettings.CommitButtonText">
            <summary>
            Gets or sets the label text of the commit button in the file picker UI.
            </summary>
            <remarks>
            By default, the label text of the commit button is <b>Save</b>.
            </remarks>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerSettings.DefaultFileExtension">
            <summary>
            Gets or sets the default file name extension that the <see cref="T:Windows.Storage.Pickers.FileSavePicker"/>
            gives to files to be saved.
            </summary>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerSettings.EnterpriseId">
            <summary>
            Gets or sets an ID that specifies the enterprise that owns the file.
            </summary>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerSettings.FileTypeChoices">
            <summary>
            Gets or sets the collection of valid file types that the user can choose to assign to a
            file.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> object that contains a collection of
            valid file types (extensions) that the user can use to save a file. Each element in
            this collection maps a display name to a corresponding collection of file name
            extensions. The key is a single string, the value is a list of strings representing one
            or more extension choices.
            </value>
            <remarks>
            Some apps do not need to understand a file format in order to process it - such as a
            cloud storage provider. Therefore, using the file wildcard character - "*" - is
            supported for the <see cref="P:Windows.Storage.Pickers.FileOpenPicker.FileTypeFilter"/> collection. However,
            writing a file requires knowledge of its format. As a result, the wildcard is not
            supported for <see cref="P:Windows.Storage.Pickers.FileSavePicker.FileTypeChoices"/>.
            <para />
            One display name as a classification of file types might have multiple file types that
            support it. For example, a display name of "HTML page" could be saved either with
            ".htm" or ".html" extension. That is why the value of each entry in a
            <see cref="T:System.Collections.Generic.IDictionary`2"/> is an ordered list (vector) of strings,
            displayed in the UI in the order that you place the extensions in the vector.
            </remarks>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerSettings.SettingsIdentifier">
            <summary>
            Gets or sets the settings identifier associated with the current
            <see cref="T:Windows.Storage.Pickers.FileSavePicker"/> instance.
            </summary>
            <remarks>
            If your application uses multiple instances of the file save picker, you can use this
            property to identify the individual instances.
            </remarks>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerSettings.SuggestedFileName">
            <summary>
            Gets or sets the file name that the file save picker suggests to the user.
            </summary>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerSettings.SuggestedSaveFile">
            <summary>
            Gets or sets the <see cref="T:Windows.Storage.StorageFile"/> that the file picker suggests to the user
            for saving a file.
            </summary>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerSettings.SuggestedStartLocation">
            <summary>
            Gets or sets the location that the file save picker suggests to the user as the
            location to save a file.
            </summary>
            <remarks>
            The <see cref="P:MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerSettings.SuggestedStartLocation"/> is not always used as the start location for
            the file picker. To give the user a sense of consistency, the file picker remembers the
            last location that the user navigated to and will generally start at that location.
            </remarks>
        </member>
        <member name="T:MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerWrapper">
            <summary>
            Class wrapping <see cref="T:Windows.Storage.Pickers.FileSavePicker"/>.
            </summary>
        </member>
        <member name="M:MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerWrapper.#ctor(MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerWrapper"/> class.
            </summary>
            <param name="settings">The settings for the file save picker.</param>
        </member>
        <member name="M:MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerWrapper.PickSaveFileAsync">
            <summary>
            Shows the file picker so that the user can save a file and set the file name,
            extension, and location of the file to be saved.
            </summary>
            <returns>
            When the call to this method completes successfully, it returns a
            <see cref="T:Windows.Storage.StorageFile"/> object that was created to represent the saved file. The file
            name, extension, and location of this <see cref="T:Windows.Storage.StorageFile"/> match those specified
            by the user, but the file has no content.
            </returns>
        </member>
        <member name="T:MvvmDialogs.FrameworkPickers.Folder.FolderPickerSettings">
            <summary>
            Settings for <see cref="T:Windows.Storage.Pickers.FolderPicker"/>.
            </summary>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.Folder.FolderPickerSettings.CommitButtonText">
            <summary>
            Gets or sets the label text of the folder picker's commit button.
            </summary>
            <remarks>
            By default, the label text of the commit button is <b>Pick Folder</b>.
            </remarks>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.Folder.FolderPickerSettings.FileTypeFilter">
            <summary>
            Gets the collection of file types that the folder picker displays.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> object that contains a collection of file types
            (file name extensions) , such as ".doc" and ".png". File name extensions are stored in
            this array as string objects.
            </value>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.Folder.FolderPickerSettings.SettingsIdentifier">
            <summary>
            Gets or sets the settings identifier associated with the with the current
            <see cref="T:Windows.Storage.Pickers.FolderPicker"/> instance.
            </summary>
            <remarks>
            If your application uses multiple instances of the folder picker, you can use this
            property to identify the individual instances.
            </remarks>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.Folder.FolderPickerSettings.SuggestedStartLocation">
            <summary>
            Gets or sets the initial location where the folder picker looks for folders to present
            to the user.
            </summary>
            <remarks>
            The <see cref="P:MvvmDialogs.FrameworkPickers.Folder.FolderPickerSettings.SuggestedStartLocation"/> is not always used as the start location for
            the file picker. To give the user a sense of consistency, the file picker remembers the
            last location that the user navigated to and will generally start at that location.
            </remarks>
        </member>
        <member name="P:MvvmDialogs.FrameworkPickers.Folder.FolderPickerSettings.ViewMode">
            <summary>
            Gets or sets the view mode that the folder picker uses to display items.
            </summary>
        </member>
        <member name="T:MvvmDialogs.FrameworkPickers.Folder.FolderPickerWrapper">
            <summary>
            Class wrapping <see cref="T:Windows.Storage.Pickers.FolderPicker"/>.
            </summary>
        </member>
        <member name="M:MvvmDialogs.FrameworkPickers.Folder.FolderPickerWrapper.#ctor(MvvmDialogs.FrameworkPickers.Folder.FolderPickerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmDialogs.FrameworkPickers.Folder.FolderPickerWrapper"/> class.
            </summary>
            <param name="settings">The settings for the folder picker.</param>
        </member>
        <member name="M:MvvmDialogs.FrameworkPickers.Folder.FolderPickerWrapper.PickSingleFolderAsync">
            <summary>
            Shows the folder picker so that the user can pick a folder. 
            </summary>
            <returns>
            When the call to this method completes successfully, it returns a
            <see cref="T:Windows.Storage.StorageFolder"/> object that represents the folder that the user picked.
            </returns>
        </member>
        <member name="T:MvvmDialogs.IDialogService">
            <summary>
            Interface abstracting the interaction between view models and views when it comes to
            opening dialogs using the MVVM pattern in UWP applications.
            </summary>
        </member>
        <member name="M:MvvmDialogs.IDialogService.ShowContentDialogAsync``1(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Begins an asynchronous operation to show the <see cref="T:Windows.UI.Xaml.Controls.ContentDialog"/> of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the content dialog to show.</typeparam>
            <param name="viewModel">The view model of the new content dialog.</param>
            <returns>
            An asynchronous operation showing the dialog. When complete, returns a
            <see cref="T:Windows.UI.Xaml.Controls.ContentDialogResult"/>.
            </returns>
        </member>
        <member name="M:MvvmDialogs.IDialogService.ShowContentDialogAsync(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Begins an asynchronous operation to show the <see cref="T:Windows.UI.Xaml.Controls.ContentDialog"/> of a type that
            is determined by the dialog type locator.
            </summary>
            <param name="viewModel">The view model of the new content dialog.</param>
            <returns>
            An asynchronous operation showing the dialog. When complete, returns a
            <see cref="T:Windows.UI.Xaml.Controls.ContentDialogResult"/>.
            </returns>
        </member>
        <member name="M:MvvmDialogs.IDialogService.ShowMessageDialogAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Windows.UI.Popups.IUICommand},System.Nullable{System.UInt32},System.Nullable{System.UInt32},Windows.UI.Popups.MessageDialogOptions)">
            <summary>
            Begins an asynchronous operation showing a <see cref="T:Windows.UI.Popups.MessageDialog"/>.
            </summary>
            <param name="content">The message displayed to the user.</param>
            <param name="title">The title you want displayed on the dialog.</param>
            <param name="commands">
            The array of commands that appear in the command bar of the message dialog. These
            commands makes the dialog actionable.
            </param>
            <param name="defaultCommandIndex">
            The index of the command you want to use as the default. This is the command that fires
            by default when users press the ENTER key.
            </param>
            <param name="cancelCommandIndex">
            The index of the command you want to use as the cancel command. This is the command
            that fires when users press the ESC key.
            </param>
            <param name="options">The options for the dialog.</param>
            <returns>
            An object that represents the asynchronous operation. For more on the async pattern, see
            <see href="https://msdn.microsoft.com/en-us/windows/uwp/threading-async/asynchronous-programming-universal-windows-platform-apps">Asynchronous programming</see>.
            </returns>
        </member>
        <member name="M:MvvmDialogs.IDialogService.PickSingleFileAsync(MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerSettings)">
            <summary>
            Shows the file picker so that the user can pick one file.
            </summary>
            <param name="settings">The settings for the file open picker.</param>
            <returns>
            When the call to this method completes successfully, it returns a
            <see cref="T:Windows.Storage.StorageFile"/> object that represents the file that the user picked.
            </returns>
        </member>
        <member name="M:MvvmDialogs.IDialogService.PickMultipleFilesAsync(MvvmDialogs.FrameworkPickers.FileOpen.FileOpenPickerSettings)">
            <summary>
            Shows the file picker so that the user can pick multiple files.
            </summary>
            <param name="settings">The settings for the file open picker.</param>
            <returns>
            When the call to this method completes successfully, it returns a
            <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> object that contains all the files that were
            picked by the user. Picked files in this array are represented by
            <see cref="T:Windows.Storage.StorageFile"/> objects.
            </returns>
        </member>
        <member name="M:MvvmDialogs.IDialogService.PickSaveFileAsync(MvvmDialogs.FrameworkPickers.FileSave.FileSavePickerSettings)">
            <summary>
            Shows the file picker so that the user can save a file and set the file name,
            extension, and location of the file to be saved.
            </summary>
            <param name="settings">The settings for the file save picker.</param>
            <returns>
            When the call to this method completes successfully, it returns a
            <see cref="T:Windows.Storage.StorageFile"/> object that was created to represent the saved file. The file
            name, extension, and location of this <see cref="T:Windows.Storage.StorageFile"/> match those specified
            by the user, but the file has no content.
            </returns>
        </member>
        <member name="M:MvvmDialogs.IDialogService.PickSingleFolderAsync(MvvmDialogs.FrameworkPickers.Folder.FolderPickerSettings)">
            <summary>
            Shows the folder picker so that the user can pick a folder. 
            </summary>
            <param name="settings">The settings for the folder picker.</param>
            <returns>
            When the call to this method completes successfully, it returns a
            <see cref="T:Windows.Storage.StorageFolder"/> object that represents the folder that the user picked.
            </returns>
        </member>
    </members>
</doc>
